// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    emails        Email[]
    threads       Thread[]
    pendingSync   PendingSync?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Thread model to group related emails
model Thread {
    threadId String @unique // Gmail thread ID
    userId   String

    snippet    String? // Thread snippet from Gmail
    historyId  String? // Gmail history ID for sync
    labels     String[] // Union of labels of all its messages 
    lastUpdate BigInt // epoch ms timestamp 

    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    emails Email[]

    @@index([userId])
    @@index([threadId])
}

// Metadata
model Email {
    // messageId corresponds to messageId in gmail API
    // messageId is also used as the key for when we store raw HTML on S3 
    messageId String @id @unique

    userId String

    threadId String? // Reference to the thread this email belongs to
    subject  String?
    from     String?
    to       String?
    date     DateTime?
    labels   String[]
    snippet  String? // Email snippet from Gmail

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    thread    Thread?  @relation(fields: [threadId], references: [threadId], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([messageId])
    @@index([threadId])
}

model PendingSync {
    userId        String   @id
    nextPageToken String? // if this is undefined, it means first sync has not run. once all syncs are done, this PendingSync gets deleted

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
